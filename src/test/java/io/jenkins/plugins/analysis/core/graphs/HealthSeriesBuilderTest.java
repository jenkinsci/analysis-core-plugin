package io.jenkins.plugins.analysis.core.graphs;


import java.util.Arrays;
import java.util.List;

import org.assertj.core.api.ListAssert;
import org.junit.jupiter.api.Test;

import edu.hm.hafner.analysis.Priority;
import io.jenkins.plugins.analysis.core.quality.HealthDescriptor;
import io.jenkins.plugins.analysis.core.quality.StaticAnalysisRun;
import static org.assertj.core.api.Assertions.*;
import static org.mockito.Mockito.*;

class HealthSeriesBuilderTest {

    /**
     * testComputeSeries should return a list with a zero, if the unhealthy is not bigger than healthy
     * healthy == unhealthy
     * result: (0)
     */
    @Test
    void computeSeriesHealthDescriptorDisabled() {
        assertThat(testComputeSeries(1, 1, 0)).containsExactly(0);
    }

    /**
     * total == healthy < unhealthy
     * result: (healty, 0, 0)
     */
    @Test
    void totalEqualToHealthy() {
        assertThat(testComputeSeries(1, 3, 1)).containsExactly(1, 0, 0);
    }

    /**
     * healthy < unhealthy == total
     * result: (healty, unhealthy - healthy ,0)
     */
    @Test
    void totalEqualToUnhealty() {
        assertThat(testComputeSeries(1, 3, 3)).containsExactly(1, 2, 0);
    }

    /**
     * healthy < unhealthy < total
     * result: (healty, unhealthy - healthy, total - unhealthy)
     */
    @Test
    void totalBiggerThanUnhealthy() {
        assertThat(testComputeSeries(1, 3, 6)).containsExactly(1, 2, 3);
    }

    /**
     * healthy < total < unhealty
     * result: (healthy, total - healthy, 0)
     */

    /**
     * Runs a parameterized test of computeSeries
     * @param healthy healthy parameter
     * @param unHeahlthy unhealthy parameter
     * @param total total parameter
     * @return the list generated by computeSeries
     */
    private List<Integer> testComputeSeries(int healthy, int unHeahlthy, int total) {
        HealthDescriptor healthDescriptor = new HealthDescriptor(Integer.toString(healthy), Integer.toString(unHeahlthy), Priority.NORMAL);
        StaticAnalysisRun staticAnalysisRun = mock(StaticAnalysisRun.class);
        when(staticAnalysisRun.getTotalSize()).thenReturn(total);
        HealthSeriesBuilder sut = new HealthSeriesBuilder(healthDescriptor);
        return sut.computeSeries(staticAnalysisRun);
    }
}